#include <LiquidCrystal.h>    //LCD library
#include <Keypad.h>
#include <Wire.h>
/******************   LCD functions  ************************/


LiquidCrystal lcd(13, 12, 11, 10, 1, 0); //declare pins
byte i; // for loop
void LCD_FireAlarm()
{
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("  Fire!  Fire!");
    lcd.setCursor(0,1);
    lcd.print("  Please Leave");
    delay(1000);
    lcd.clear();
    lcd.noBlink();
    delay(500);
}
void LCD_DoorOpen()
{
    delay(100);
    for(i=0; i<2; i++)
    {
        lcd.display();
        lcd.setCursor(0,0);
        lcd.print("  Door is Open");
        lcd.setCursor(0,1);
        lcd.print("  Welcome Home");
        delay(100);
        lcd.clear();
        delay(100);
    }
    lcd.clear();
}
void LCD_EnterPassword()
{
    lcd.setCursor(0,0);
    lcd.print("Please Enter");
    lcd.setCursor(0,1);
    lcd.print("Your Password:");
    delay(5000);
    lcd.clear();
}
void LCD_WrongPassword()
{
    delay(100);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print(" Wrong Password");
    lcd.setCursor(0,1);
    lcd.print(" Try Again");
    delay(200);
    lcd.clear();
}
void LCD_UserConfirmation()
{
    delay(100);
    lcd.setCursor(0,0);
    lcd.print("3 failed attempts");
    lcd.setCursor(0,1);
    lcd.print("Was That You?");
    delay(500);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("*)Yes #)No :");
    lcd.setCursor(0,1);
}
void LCD_intruder()
{
    lcd.setCursor(0,0);
    lcd.print(" Leave! Leave!");
    lcd.setCursor(0,1);
    lcd.print("   Intruder!");
    delay(1000);
    lcd.clear();
    delay(500);
}
void LCD_EnterKey()
{
    lcd.setCursor(0,0);
    lcd.print("Enter Key:");
}

/********************  KeyPad function  ***********************/

const byte ROWS = 4;                         //declare number of rows
const byte COLS = 4;                         //declare number of columns
char keys[ROWS][COLS] =
{
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};                                              //set array;
byte rowPins[ROWS] = {2, 3, 4, 5};              //pins for rows
byte colPins[COLS] = {6, 7, 8, 9};              //pins for columns
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

/*******************  smart lock function  ***********************/
#define FrontDoorKeyPad 1
#define CheckKey 2
#define Unlock 3
#define UserConfirmation 4
#define Intruder 5
#define PasswordLength 5

char input[PasswordLength];
char DefaultPassword[PasswordLength]="5267"; //default password
byte count = 0;                              //record number of key inputs
byte attempts = 0;                           //record number failed attempts
int state = FrontDoorKeyPad;                 //initial state
byte signal;


void KeyPad_reset()                          //clear array and count
{
    while(count!=0)
    	input[count--] = 0;
}

void userConfirm()
{
  char a = keypad.getKey();
  char lastKey = a;                         // assign the varible lastKey to a

  while(lastKey == a)                       //only change when a change
    a = keypad.getKey();
                            				//assign a to confirm
  lcd.print(a);                       		//print the value
  delay(100);                               // delay a bit

  if(a == '*')
    state = Unlock;
  else if(a == '#')
    state = Intruder;
}

/**************** loop() ********************/

void setup()
{
  keypad.setDebounceTime(10);
  lcd.begin(16, 2); // initialize the number of (columns, row)
  Wire.begin();
  //Serial.begin(9600);
}
void loop()
{
  switch(state)
    {
        case FrontDoorKeyPad:
        {
            char key = keypad.getKey();
          	if(key)
            {
            	input[count] = key;
            	LCD_EnterKey();
            	lcd.setCursor(count,1);
            	lcd.print(key);                     //output entered keys
            	count++;
            }
            if(count==PasswordLength-1)
                state = CheckKey;
            break;
        }
        case CheckKey:
        {
            if(!strcmp(input,DefaultPassword))
            {
              state = Unlock;
              attempts = 0;
            }
            else if(attempts<2)
            {
                LCD_WrongPassword();
                attempts++;
                state = FrontDoorKeyPad;
            }
            else
            {
              attempts = 0;
              state = UserConfirmation;
            }
            KeyPad_reset();
            break;
        }
        case Unlock:
        {
          	signal=1;
          	Wire.beginTransmission(4);   // transmit to device #4
  			Wire.write(signal);               // sends one byte
  			Wire.endTransmission();      // stop transmitting
          	LCD_DoorOpen();
          	state = FrontDoorKeyPad;
          	break;
        }
        case UserConfirmation:
        {
            LCD_UserConfirmation();
          	userConfirm();
            break;
        }
        case Intruder:
        {
            signal=2;
          	Wire.beginTransmission(4);   // transmit to device #4
  			Wire.write(signal);  		 // sends one byte
  			Wire.endTransmission();      // stop transmitting
          	LCD_intruder();
            state = FrontDoorKeyPad;
            break;
        }
    }
}
